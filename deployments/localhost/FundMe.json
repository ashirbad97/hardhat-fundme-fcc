{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x03ccc4a0ec68461ee1ad4a12c30c7a044d8738faa5572dbebae10c4ff6ad647d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1085799",
    "logsBloom": "0x
    "blockHash": "0xe8e1188a138ae29c8671462f79cfe4f6c166cb0dc9f003aab17772daa2be4565",
    "transactionHash": "0x03ccc4a0ec68461ee1ad4a12c30c7a044d8738faa5572dbebae10c4ff6ad647d",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1085799",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "57dee8432dc648cb580fbe4da55da736",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    // Since the PriceConvertor also has use of the address of the AggregatorV3 Interface therefore we can pass it the\\n    // address of the contract\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Since we want to work with multiple chains and the address of pricefeed might vary we will parameterise it\\n    constructor(address priceFeedAddress) {\\n        // Address of Aggregator will differ from chain to chain so we will take input from the constructor\\n        i_owner = msg.sender;\\n        // we will get an handle of the AggregatorV3 initialised inside the constructor itself\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        /*\\n            As the PriceConvertor contract takes use of the address of AggregatorV3 interface we will pass the priceFeed as argument\\n            as we know that on type if we call a function then the value itself is the 1st argument and the value passed in the\\n            parameters is the 2nd argument\\n         */\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        // priceFeed made a global variable\\n        return s_priceFeed.version();\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    // This is gas inefficient as we are acessing a storage value a lot \\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n\\n    function cheaperWithdraw() public payable onlyOwner{\\n        // anyways the variables which are declared inside a function have memory storage but since we have a special \\n        // datatype of array we need to specify the data location\\n        address[] memory funders = s_funders;//copying the state variable to memory as ot will be cheaper to work with \\n        // N.B: Mappings cannot be in memory\\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /*\\n        Since anyway people can view our source code so we make this getter function to view the variables after we make them\\n        private. Since private functions are expensive. \\n    */\\n\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n    function getFunder(uint256 index) public view returns(address) {\\n        return s_funders[index];\\n    }\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n    function getPriceFeed() public view returns (AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0xd8a9ed1e5c938fc56ede68de32eae9cfcd3ea823228b8769ea195b77e87a045b\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x84d6e564d4c53b8be91dff675a5290025120cf8ba1d9c786a18246e39af840ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013cc380380620013cc8339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c611246620001866000396000818161041201528181610661015281816106b101526108a701526112466000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b71565b610321565b6040516100d79190610d94565b60405180910390f35b3480156100ec57600080fd5b506100f5610369565b6040516101029190610d94565b60405180910390f35b610113610410565b005b34801561012157600080fd5b5061012a610650565b6040516101379190610d94565b60405180910390f35b34801561014c57600080fd5b5061015561065d565b6040516101629190610d1e565b60405180910390f35b34801561017757600080fd5b50610180610685565b60405161018d9190610d39565b60405180910390f35b61019e6101e7565b005b6101a86106af565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610b9e565b61093d565b6040516101de9190610d1e565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098590919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610d74565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102b59190610dcb565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610bcb565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610495576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610540576000600182815481106104bb576104ba6110fc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053890611055565b915050610498565b50600067ffffffffffffffff81111561055c5761055b61112b565b5b60405190808252806020026020018201604052801561058a5781602001602082028036833780820191505090505b50600190805190602001906105a0929190610a61565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105c790610d09565b60006040518083038185875af1925050503d8060008114610604576040519150601f19603f3d011682016040523d82523d6000602084013e610609565b606091505b505090508061064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064490610d54565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610734576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107b857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161076e575b5050505050905060005b81518110156108425760008282815181106107e0576107df6110fc565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083a90611055565b9150506107c2565b50600067ffffffffffffffff81111561085e5761085d61112b565b5b60405190808252806020026020018201604052801561088c5781602001602082028036833780820191505090505b50600190805190602001906108a2929190610a61565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108e990610d09565b60006040518083038185875af1925050503d8060008114610926576040519150601f19603f3d011682016040523d82523d6000602084013e61092b565b606091505b505090508061093957600080fd5b5050565b600060018281548110610953576109526110fc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610991836109c1565b90506000670de0b6b3a764000085836109aa9190610f69565b6109b49190610e21565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a0a57600080fd5b505afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190610bf8565b5050509150506402540be40081610a599190610e52565b915050919050565b828054828255906000526020600020908101928215610ada579160200282015b82811115610ad95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a81565b5b509050610ae79190610aeb565b5090565b5b80821115610b04576000816000905550600101610aec565b5090565b600081359050610b17816111b4565b92915050565b600081519050610b2c816111cb565b92915050565b600081359050610b41816111e2565b92915050565b600081519050610b56816111e2565b92915050565b600081519050610b6b816111f9565b92915050565b600060208284031215610b8757610b8661115a565b5b6000610b9584828501610b08565b91505092915050565b600060208284031215610bb457610bb361115a565b5b6000610bc284828501610b32565b91505092915050565b600060208284031215610be157610be061115a565b5b6000610bef84828501610b47565b91505092915050565b600080600080600060a08688031215610c1457610c1361115a565b5b6000610c2288828901610b5c565b9550506020610c3388828901610b1d565b9450506040610c4488828901610b47565b9350506060610c5588828901610b47565b9250506080610c6688828901610b5c565b9150509295509295909350565b610c7c81610fc3565b82525050565b610c8b8161101f565b82525050565b6000610c9e600b83610dba565b9150610ca98261115f565b602082019050919050565b6000610cc1601b83610dba565b9150610ccc82611188565b602082019050919050565b6000610ce4600083610daf565b9150610cef826111b1565b600082019050919050565b610d0381610fff565b82525050565b6000610d1482610cd7565b9150819050919050565b6000602082019050610d336000830184610c73565b92915050565b6000602082019050610d4e6000830184610c82565b92915050565b60006020820190508181036000830152610d6d81610c91565b9050919050565b60006020820190508181036000830152610d8d81610cb4565b9050919050565b6000602082019050610da96000830184610cfa565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610dd682610fff565b9150610de183610fff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e1657610e1561109e565b5b828201905092915050565b6000610e2c82610fff565b9150610e3783610fff565b925082610e4757610e466110cd565b5b828204905092915050565b6000610e5d82610fd5565b9150610e6883610fd5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ea757610ea661109e565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610ee457610ee361109e565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f2157610f2061109e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f5e57610f5d61109e565b5b828202905092915050565b6000610f7482610fff565b9150610f7f83610fff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fb857610fb761109e565b5b828202905092915050565b6000610fce82610fdf565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061102a82611031565b9050919050565b600061103c82611043565b9050919050565b600061104e82610fdf565b9050919050565b600061106082610fff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110935761109261109e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6111bd81610fc3565b81146111c857600080fd5b50565b6111d481610fd5565b81146111df57600080fd5b50565b6111eb81610fff565b81146111f657600080fd5b50565b61120281611009565b811461120d57600080fd5b5056fea26469706673582212201c3e42b77e825b606f048deee963d986c6062d438d379bb0cdf72c4671cee48864736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b71565b610321565b6040516100d79190610d94565b60405180910390f35b3480156100ec57600080fd5b506100f5610369565b6040516101029190610d94565b60405180910390f35b610113610410565b005b34801561012157600080fd5b5061012a610650565b6040516101379190610d94565b60405180910390f35b34801561014c57600080fd5b5061015561065d565b6040516101629190610d1e565b60405180910390f35b34801561017757600080fd5b50610180610685565b60405161018d9190610d39565b60405180910390f35b61019e6101e7565b005b6101a86106af565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610b9e565b61093d565b6040516101de9190610d1e565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098590919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610d74565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102b59190610dcb565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610bcb565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610495576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610540576000600182815481106104bb576104ba6110fc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053890611055565b915050610498565b50600067ffffffffffffffff81111561055c5761055b61112b565b5b60405190808252806020026020018201604052801561058a5781602001602082028036833780820191505090505b50600190805190602001906105a0929190610a61565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105c790610d09565b60006040518083038185875af1925050503d8060008114610604576040519150601f19603f3d011682016040523d82523d6000602084013e610609565b606091505b505090508061064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064490610d54565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610734576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107b857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161076e575b5050505050905060005b81518110156108425760008282815181106107e0576107df6110fc565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083a90611055565b9150506107c2565b50600067ffffffffffffffff81111561085e5761085d61112b565b5b60405190808252806020026020018201604052801561088c5781602001602082028036833780820191505090505b50600190805190602001906108a2929190610a61565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108e990610d09565b60006040518083038185875af1925050503d8060008114610926576040519150601f19603f3d011682016040523d82523d6000602084013e61092b565b606091505b505090508061093957600080fd5b5050565b600060018281548110610953576109526110fc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610991836109c1565b90506000670de0b6b3a764000085836109aa9190610f69565b6109b49190610e21565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a0a57600080fd5b505afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190610bf8565b5050509150506402540be40081610a599190610e52565b915050919050565b828054828255906000526020600020908101928215610ada579160200282015b82811115610ad95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a81565b5b509050610ae79190610aeb565b5090565b5b80821115610b04576000816000905550600101610aec565b5090565b600081359050610b17816111b4565b92915050565b600081519050610b2c816111cb565b92915050565b600081359050610b41816111e2565b92915050565b600081519050610b56816111e2565b92915050565b600081519050610b6b816111f9565b92915050565b600060208284031215610b8757610b8661115a565b5b6000610b9584828501610b08565b91505092915050565b600060208284031215610bb457610bb361115a565b5b6000610bc284828501610b32565b91505092915050565b600060208284031215610be157610be061115a565b5b6000610bef84828501610b47565b91505092915050565b600080600080600060a08688031215610c1457610c1361115a565b5b6000610c2288828901610b5c565b9550506020610c3388828901610b1d565b9450506040610c4488828901610b47565b9350506060610c5588828901610b47565b9250506080610c6688828901610b5c565b9150509295509295909350565b610c7c81610fc3565b82525050565b610c8b8161101f565b82525050565b6000610c9e600b83610dba565b9150610ca98261115f565b602082019050919050565b6000610cc1601b83610dba565b9150610ccc82611188565b602082019050919050565b6000610ce4600083610daf565b9150610cef826111b1565b600082019050919050565b610d0381610fff565b82525050565b6000610d1482610cd7565b9150819050919050565b6000602082019050610d336000830184610c73565b92915050565b6000602082019050610d4e6000830184610c82565b92915050565b60006020820190508181036000830152610d6d81610c91565b9050919050565b60006020820190508181036000830152610d8d81610cb4565b9050919050565b6000602082019050610da96000830184610cfa565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610dd682610fff565b9150610de183610fff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e1657610e1561109e565b5b828201905092915050565b6000610e2c82610fff565b9150610e3783610fff565b925082610e4757610e466110cd565b5b828204905092915050565b6000610e5d82610fd5565b9150610e6883610fd5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ea757610ea661109e565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610ee457610ee361109e565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f2157610f2061109e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f5e57610f5d61109e565b5b828202905092915050565b6000610f7482610fff565b9150610f7f83610fff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fb857610fb761109e565b5b828202905092915050565b6000610fce82610fdf565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061102a82611031565b9050919050565b600061103c82611043565b9050919050565b600061104e82610fdf565b9050919050565b600061106082610fff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110935761109261109e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6111bd81610fc3565b81146111c857600080fd5b50565b6111d481610fd5565b81146111df57600080fd5b50565b6111eb81610fff565b81146111f657600080fd5b50565b61120281611009565b811461120d57600080fd5b5056fea26469706673582212201c3e42b77e825b606f048deee963d986c6062d438d379bb0cdf72c4671cee48864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}