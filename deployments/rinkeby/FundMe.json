{
  "address": "0x3d97021cFe6dEE834895FF0265E0e759beF889c9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf0c3817a74dbcbf86a44dd740b854d26be36344838c22bec1da68bb117a1a24e",
  "receipt": {
    "to": null,
    "from": "0x5a4F5B1661BB975Ded33b8c6BbA62CCaeE2578C3",
    "contractAddress": "0x3d97021cFe6dEE834895FF0265E0e759beF889c9",
    "transactionIndex": 4,
    "gasUsed": "950298",
    "logsBloom": "0x
    "blockHash": "0xd8358dcc34539fbd8d197e46a0d6f03639777e3d363dc6c67aa82aebfd98a021",
    "transactionHash": "0xf0c3817a74dbcbf86a44dd740b854d26be36344838c22bec1da68bb117a1a24e",
    "logs": [],
    "blockNumber": 10822971,
    "cumulativeGasUsed": "2009247",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "bc497f37d61ff938c22a613d49aabd9e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    // Since the PriceConvertor also has use of the address of the AggregatorV3 Interface therefore we can pass it the \\n    // address of the contract\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface public priceFeed; \\n    \\n    // Since we want to work with multiple chains and the address of pricefeed might vary we will parameterise it\\n    constructor(address priceFeedAddress) { // Address of Aggregator will differ from chain to chain so we will take input from the constructor\\n        i_owner = msg.sender;\\n        // we will get an handle of the AggregatorV3 initialised inside the constructor itself\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        /*\\n            As the PriceConvertor contract takes use of the address of AggregatorV3 interface we will pass the priceFeed as argument\\n            as we know that on type if we call a function then the value itself is the 1st argument and the value passed in the\\n            parameters is the 2nd argument\\n         */\\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n    \\n    function getVersion() public view returns (uint256){\\n        // priceFeed made a global variable\\n        return priceFeed.version();\\n    }\\n    \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert NotOwner();\\n        _;\\n    }\\n    \\n    function withdraw() payable onlyOwner public {\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x5cacaf73ec8b48dd5c476d9972fe0d51d4a0b8be7180021684dca6489a34037e\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x84d6e564d4c53b8be91dff675a5290025120cf8ba1d9c786a18246e39af840ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010d2380380620010d28339818101604052810190620000379190620000d7565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600081519050620000d18162000142565b92915050565b600060208284031215620000f057620000ef6200013d565b5b60006200010084828501620000c0565b91505092915050565b600062000116826200011d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014d8162000109565b81146200015957600080fd5b50565b610f66806200016c6000396000f3fe60806040526004361061007f5760003560e01c8063741bef1a1161004e578063741bef1a14610135578063b60d428814610160578063dba6335f1461016a578063dc0d3dff146101955761008e565b80630d8e6e2c146100985780633ccfd60b146100c35780633e47d6f3146100cd5780636b69a5921461010a5761008e565b3661008e5761008c6101d2565b005b6100966101d2565b005b3480156100a457600080fd5b506100ad61030c565b6040516100ba9190610ab4565b60405180910390f35b6100cb6103b3565b005b3480156100d957600080fd5b506100f460048036038101906100ef9190610891565b6105f5565b6040516101019190610ab4565b60405180910390f35b34801561011657600080fd5b5061011f61060d565b60405161012c9190610ab4565b60405180910390f35b34801561014157600080fd5b5061014a61061a565b6040516101579190610a59565b60405180910390f35b6101686101d2565b005b34801561017657600080fd5b5061017f610640565b60405161018c9190610a3e565b60405180910390f35b3480156101a157600080fd5b506101bc60048036038101906101b791906108be565b610666565b6040516101c99190610a3e565b60405180910390f35b6802b5e3af16b1880000610211600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346106a590919063ffffffff16565b1015610252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024990610a94565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102a09190610aeb565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561037657600080fd5b505afa15801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae91906108eb565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043a576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104e5576000600182815481106104605761045f610e1c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104dd90610d75565b91505061043d565b50600067ffffffffffffffff81111561050157610500610e4b565b5b60405190808252806020026020018201604052801561052f5781602001602082028036833780820191505090505b5060019080519060200190610545929190610781565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161056c90610a29565b60006040518083038185875af1925050503d80600081146105a9576040519150601f19603f3d011682016040523d82523d6000602084013e6105ae565b606091505b50509050806105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e990610a74565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061067657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806106b1836106e1565b90506000670de0b6b3a764000085836106ca9190610c89565b6106d49190610b41565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561072a57600080fd5b505afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190610918565b5050509150506402540be400816107799190610b72565b915050919050565b8280548282559060005260206000209081019282156107fa579160200282015b828111156107f95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107a1565b5b509050610807919061080b565b5090565b5b8082111561082457600081600090555060010161080c565b5090565b60008135905061083781610ed4565b92915050565b60008151905061084c81610eeb565b92915050565b60008135905061086181610f02565b92915050565b60008151905061087681610f02565b92915050565b60008151905061088b81610f19565b92915050565b6000602082840312156108a7576108a6610e7a565b5b60006108b584828501610828565b91505092915050565b6000602082840312156108d4576108d3610e7a565b5b60006108e284828501610852565b91505092915050565b60006020828403121561090157610900610e7a565b5b600061090f84828501610867565b91505092915050565b600080600080600060a0868803121561093457610933610e7a565b5b60006109428882890161087c565b95505060206109538882890161083d565b945050604061096488828901610867565b935050606061097588828901610867565b92505060806109868882890161087c565b9150509295509295909350565b61099c81610ce3565b82525050565b6109ab81610d3f565b82525050565b60006109be600b83610ada565b91506109c982610e7f565b602082019050919050565b60006109e1601b83610ada565b91506109ec82610ea8565b602082019050919050565b6000610a04600083610acf565b9150610a0f82610ed1565b600082019050919050565b610a2381610d1f565b82525050565b6000610a34826109f7565b9150819050919050565b6000602082019050610a536000830184610993565b92915050565b6000602082019050610a6e60008301846109a2565b92915050565b60006020820190508181036000830152610a8d816109b1565b9050919050565b60006020820190508181036000830152610aad816109d4565b9050919050565b6000602082019050610ac96000830184610a1a565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610af682610d1f565b9150610b0183610d1f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b3657610b35610dbe565b5b828201905092915050565b6000610b4c82610d1f565b9150610b5783610d1f565b925082610b6757610b66610ded565b5b828204905092915050565b6000610b7d82610cf5565b9150610b8883610cf5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610bc757610bc6610dbe565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610c0457610c03610dbe565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610c4157610c40610dbe565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610c7e57610c7d610dbe565b5b828202905092915050565b6000610c9482610d1f565b9150610c9f83610d1f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610cd857610cd7610dbe565b5b828202905092915050565b6000610cee82610cff565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610d4a82610d51565b9050919050565b6000610d5c82610d63565b9050919050565b6000610d6e82610cff565b9050919050565b6000610d8082610d1f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610db357610db2610dbe565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b610edd81610ce3565b8114610ee857600080fd5b50565b610ef481610cf5565b8114610eff57600080fd5b50565b610f0b81610d1f565b8114610f1657600080fd5b50565b610f2281610d29565b8114610f2d57600080fd5b5056fea2646970667358221220ce83a9cbf1ec3bd85efeaaadcc00726384f827dbae90a918d6b679a8d1be4c7364736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063741bef1a1161004e578063741bef1a14610135578063b60d428814610160578063dba6335f1461016a578063dc0d3dff146101955761008e565b80630d8e6e2c146100985780633ccfd60b146100c35780633e47d6f3146100cd5780636b69a5921461010a5761008e565b3661008e5761008c6101d2565b005b6100966101d2565b005b3480156100a457600080fd5b506100ad61030c565b6040516100ba9190610ab4565b60405180910390f35b6100cb6103b3565b005b3480156100d957600080fd5b506100f460048036038101906100ef9190610891565b6105f5565b6040516101019190610ab4565b60405180910390f35b34801561011657600080fd5b5061011f61060d565b60405161012c9190610ab4565b60405180910390f35b34801561014157600080fd5b5061014a61061a565b6040516101579190610a59565b60405180910390f35b6101686101d2565b005b34801561017657600080fd5b5061017f610640565b60405161018c9190610a3e565b60405180910390f35b3480156101a157600080fd5b506101bc60048036038101906101b791906108be565b610666565b6040516101c99190610a3e565b60405180910390f35b6802b5e3af16b1880000610211600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346106a590919063ffffffff16565b1015610252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024990610a94565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102a09190610aeb565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561037657600080fd5b505afa15801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae91906108eb565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043a576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104e5576000600182815481106104605761045f610e1c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104dd90610d75565b91505061043d565b50600067ffffffffffffffff81111561050157610500610e4b565b5b60405190808252806020026020018201604052801561052f5781602001602082028036833780820191505090505b5060019080519060200190610545929190610781565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161056c90610a29565b60006040518083038185875af1925050503d80600081146105a9576040519150601f19603f3d011682016040523d82523d6000602084013e6105ae565b606091505b50509050806105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e990610a74565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061067657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806106b1836106e1565b90506000670de0b6b3a764000085836106ca9190610c89565b6106d49190610b41565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561072a57600080fd5b505afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190610918565b5050509150506402540be400816107799190610b72565b915050919050565b8280548282559060005260206000209081019282156107fa579160200282015b828111156107f95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107a1565b5b509050610807919061080b565b5090565b5b8082111561082457600081600090555060010161080c565b5090565b60008135905061083781610ed4565b92915050565b60008151905061084c81610eeb565b92915050565b60008135905061086181610f02565b92915050565b60008151905061087681610f02565b92915050565b60008151905061088b81610f19565b92915050565b6000602082840312156108a7576108a6610e7a565b5b60006108b584828501610828565b91505092915050565b6000602082840312156108d4576108d3610e7a565b5b60006108e284828501610852565b91505092915050565b60006020828403121561090157610900610e7a565b5b600061090f84828501610867565b91505092915050565b600080600080600060a0868803121561093457610933610e7a565b5b60006109428882890161087c565b95505060206109538882890161083d565b945050604061096488828901610867565b935050606061097588828901610867565b92505060806109868882890161087c565b9150509295509295909350565b61099c81610ce3565b82525050565b6109ab81610d3f565b82525050565b60006109be600b83610ada565b91506109c982610e7f565b602082019050919050565b60006109e1601b83610ada565b91506109ec82610ea8565b602082019050919050565b6000610a04600083610acf565b9150610a0f82610ed1565b600082019050919050565b610a2381610d1f565b82525050565b6000610a34826109f7565b9150819050919050565b6000602082019050610a536000830184610993565b92915050565b6000602082019050610a6e60008301846109a2565b92915050565b60006020820190508181036000830152610a8d816109b1565b9050919050565b60006020820190508181036000830152610aad816109d4565b9050919050565b6000602082019050610ac96000830184610a1a565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610af682610d1f565b9150610b0183610d1f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b3657610b35610dbe565b5b828201905092915050565b6000610b4c82610d1f565b9150610b5783610d1f565b925082610b6757610b66610ded565b5b828204905092915050565b6000610b7d82610cf5565b9150610b8883610cf5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610bc757610bc6610dbe565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610c0457610c03610dbe565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610c4157610c40610dbe565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610c7e57610c7d610dbe565b5b828202905092915050565b6000610c9482610d1f565b9150610c9f83610d1f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610cd857610cd7610dbe565b5b828202905092915050565b6000610cee82610cff565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610d4a82610d51565b9050919050565b6000610d5c82610d63565b9050919050565b6000610d6e82610cff565b9050919050565b6000610d8082610d1f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610db357610db2610dbe565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b610edd81610ce3565b8114610ee857600080fd5b50565b610ef481610cf5565b8114610eff57600080fd5b50565b610f0b81610d1f565b8114610f1657600080fd5b50565b610f2281610d29565b8114610f2d57600080fd5b5056fea2646970667358221220ce83a9cbf1ec3bd85efeaaadcc00726384f827dbae90a918d6b679a8d1be4c7364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}